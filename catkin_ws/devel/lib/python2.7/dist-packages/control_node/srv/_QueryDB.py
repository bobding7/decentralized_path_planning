# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_node/QueryDBRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_node.msg

class QueryDBRequest(genpy.Message):
  _md5sum = "f580b5985424d93b1188f02ce96c778a"
  _type = "control_node/QueryDBRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string type
Belief in_belief

================================================================================
MSG: control_node/Belief
Path2D[] belief

================================================================================
MSG: control_node/Path2D
int8 id
int32 timestamp
Pose2D[] poses

================================================================================
MSG: control_node/Pose2D
float32 x
float32 y
float32 yaw
"""
  __slots__ = ['type','in_belief']
  _slot_types = ['string','control_node/Belief']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       type,in_belief

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QueryDBRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.type is None:
        self.type = ''
      if self.in_belief is None:
        self.in_belief = control_node.msg.Belief()
    else:
      self.type = ''
      self.in_belief = control_node.msg.Belief()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.in_belief.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.in_belief.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.in_belief is None:
        self.in_belief = control_node.msg.Belief()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.in_belief.belief = []
      for i in range(0, length):
        val1 = control_node.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = control_node.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.in_belief.belief.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.in_belief.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.in_belief.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.in_belief is None:
        self.in_belief = control_node.msg.Belief()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.type = str[start:end].decode('utf-8')
      else:
        self.type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.in_belief.belief = []
      for i in range(0, length):
        val1 = control_node.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = control_node.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.in_belief.belief.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bi = struct.Struct("<bi")
_struct_3f = struct.Struct("<3f")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from control_node/QueryDBResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import control_node.msg

class QueryDBResponse(genpy.Message):
  _md5sum = "dd13073dcb0013bac8559abc5c945654"
  _type = "control_node/QueryDBResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Belief out_belief


================================================================================
MSG: control_node/Belief
Path2D[] belief

================================================================================
MSG: control_node/Path2D
int8 id
int32 timestamp
Pose2D[] poses

================================================================================
MSG: control_node/Pose2D
float32 x
float32 y
float32 yaw
"""
  __slots__ = ['out_belief']
  _slot_types = ['control_node/Belief']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       out_belief

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(QueryDBResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.out_belief is None:
        self.out_belief = control_node.msg.Belief()
    else:
      self.out_belief = control_node.msg.Belief()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.out_belief.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.out_belief.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.out_belief is None:
        self.out_belief = control_node.msg.Belief()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out_belief.belief = []
      for i in range(0, length):
        val1 = control_node.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = control_node.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.out_belief.belief.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.out_belief.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.out_belief.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.out_belief is None:
        self.out_belief = control_node.msg.Belief()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.out_belief.belief = []
      for i in range(0, length):
        val1 = control_node.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = control_node.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.out_belief.belief.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bi = struct.Struct("<bi")
_struct_3f = struct.Struct("<3f")
class QueryDB(object):
  _type          = 'control_node/QueryDB'
  _md5sum = '14d424e88a7c969764a42fa104686aa4'
  _request_class  = QueryDBRequest
  _response_class = QueryDBResponse
