# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mstar/PriorityPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mstar.msg

class PriorityPlanRequest(genpy.Message):
  _md5sum = "f771a356ef9828da23ebce50ee5073b3"
  _type = "mstar/PriorityPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int8[] robotIDs
Belief fix_paths
Pose2DList current
Pose2DList target

================================================================================
MSG: mstar/Belief
Path2D[] belief

================================================================================
MSG: mstar/Path2D
int8 id
int32 timestamp
Pose2D[] poses

================================================================================
MSG: mstar/Pose2D
float32 x
float32 y
float32 yaw

================================================================================
MSG: mstar/Pose2DList
Pose2D[] poses"""
  __slots__ = ['robotIDs','fix_paths','current','target']
  _slot_types = ['int8[]','mstar/Belief','mstar/Pose2DList','mstar/Pose2DList']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robotIDs,fix_paths,current,target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PriorityPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.robotIDs is None:
        self.robotIDs = []
      if self.fix_paths is None:
        self.fix_paths = mstar.msg.Belief()
      if self.current is None:
        self.current = mstar.msg.Pose2DList()
      if self.target is None:
        self.target = mstar.msg.Pose2DList()
    else:
      self.robotIDs = []
      self.fix_paths = mstar.msg.Belief()
      self.current = mstar.msg.Pose2DList()
      self.target = mstar.msg.Pose2DList()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.robotIDs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.robotIDs))
      length = len(self.fix_paths.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.fix_paths.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
      length = len(self.current.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.current.poses:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
      length = len(self.target.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.target.poses:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.fix_paths is None:
        self.fix_paths = mstar.msg.Belief()
      if self.current is None:
        self.current = mstar.msg.Pose2DList()
      if self.target is None:
        self.target = mstar.msg.Pose2DList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.robotIDs = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fix_paths.belief = []
      for i in range(0, length):
        val1 = mstar.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = mstar.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.fix_paths.belief.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current.poses = []
      for i in range(0, length):
        val1 = mstar.msg.Pose2D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
        self.current.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target.poses = []
      for i in range(0, length):
        val1 = mstar.msg.Pose2D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
        self.target.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.robotIDs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.robotIDs.tostring())
      length = len(self.fix_paths.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.fix_paths.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
      length = len(self.current.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.current.poses:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
      length = len(self.target.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.target.poses:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.fix_paths is None:
        self.fix_paths = mstar.msg.Belief()
      if self.current is None:
        self.current = mstar.msg.Pose2DList()
      if self.target is None:
        self.target = mstar.msg.Pose2DList()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.robotIDs = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.fix_paths.belief = []
      for i in range(0, length):
        val1 = mstar.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = mstar.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.fix_paths.belief.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.current.poses = []
      for i in range(0, length):
        val1 = mstar.msg.Pose2D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
        self.current.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.target.poses = []
      for i in range(0, length):
        val1 = mstar.msg.Pose2D()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
        self.target.poses.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bi = struct.Struct("<bi")
_struct_3f = struct.Struct("<3f")
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mstar/PriorityPlanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mstar.msg

class PriorityPlanResponse(genpy.Message):
  _md5sum = "8a96641c84d3cf8054253ee45def8662"
  _type = "mstar/PriorityPlanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """Belief path


================================================================================
MSG: mstar/Belief
Path2D[] belief

================================================================================
MSG: mstar/Path2D
int8 id
int32 timestamp
Pose2D[] poses

================================================================================
MSG: mstar/Pose2D
float32 x
float32 y
float32 yaw
"""
  __slots__ = ['path']
  _slot_types = ['mstar/Belief']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PriorityPlanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = mstar.msg.Belief()
    else:
      self.path = mstar.msg.Belief()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.path.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.path is None:
        self.path = mstar.msg.Belief()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.belief = []
      for i in range(0, length):
        val1 = mstar.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = mstar.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.path.belief.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.path.belief)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.belief:
        _x = val1
        buff.write(_struct_bi.pack(_x.id, _x.timestamp))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _x = val2
          buff.write(_struct_3f.pack(_x.x, _x.y, _x.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.path is None:
        self.path = mstar.msg.Belief()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.belief = []
      for i in range(0, length):
        val1 = mstar.msg.Path2D()
        _x = val1
        start = end
        end += 5
        (_x.id, _x.timestamp,) = _struct_bi.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = mstar.msg.Pose2D()
          _x = val2
          start = end
          end += 12
          (_x.x, _x.y, _x.yaw,) = _struct_3f.unpack(str[start:end])
          val1.poses.append(val2)
        self.path.belief.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_bi = struct.Struct("<bi")
_struct_3f = struct.Struct("<3f")
class PriorityPlan(object):
  _type          = 'mstar/PriorityPlan'
  _md5sum = 'fd5a9e5a4e9db09f05592023da0f0f50'
  _request_class  = PriorityPlanRequest
  _response_class = PriorityPlanResponse
